Quy tắc ưu tiên cái mới trong mọi thuật toán hoạt động như sau:
- khi đẩy tiến trình vào ready queue (hay 'CPU_queue'), cái nào được đẩy vào ready queue trước thì đi trước
- nếu xảy ra conflict (có nhiều hơn 1 tiến trình được đẩy vào cùng một lúc) thì tiến trình nào có lần cuối sử dụng CPU ('last_out_CPU_time') sớm hơn thì được ưu tiên dequeue ra trước ('last_out_CPU_time' mặc định của 1 tiến trình khi MỚI ĐƯỢC ADD VÀO ta quy ước là 0 -- tức sớm nhất, mục đích khiến nó giành được quyền ưu tiên dequeue nhất). Giải thích: 'last_out_CPU_time' sớm nhất tức là lần cuối nó sử dụng CPU là quá lâu trước đó, do đó khi vào lại thì nó giống như một người mới nhất vậy

Nếu cả 2 điều kiện trên bằng nhau thì cái nào đẩy vào trước cũng được (tức sau đó nó sẽ được dequeue trước) 

Lưu ý: việc ưu tiên cái nào cũng được như này có thể khiến cho 'turnaround_time' hay 'waiting_time' của các tiến trình ở mỗi tổ hợp là khác nhau, do đó cân nhắc kĩ điều này. Tuy nhiên nếu có điều kiện gì bổ sung thì bổ sung thêm đơn giản ấy mà
=====================================================
=====================================================

// FCFS chỉ có thể conflict ready queue tối đa 2 cái: cái xuất hiện mới (2), cái từ I/O đẩy qua (1)
// conflict 2 cái giây thứ 6

input:
1
3
0 1 5 1
3 3
6 2
output:
1 _ _ 2 2 2 3 3 1 
_ 1 1 1 1 1 
9 3 2 
2 0 0 



// RR chỉ có thể conflict tối đa 3 cái: cái xuất hiện mới (3), cái đẩy từ I/O qua (2), cái hết hạn time slice (1)
// nguyên nhân có priority trên: cái nào mà lần cuối sử dụng CPU càng sớm, thì khi add vào ready queue tính là càng mới
// conflict 3 cái giây thứ 6

input:
2
3
3
0 1 5 4
3 7 3
6 3 3
output:
1 _ _ 2 2 2 3 3 3 1 1 1 2 2 2 1 2 
_ 1 1 1 1 1 _ _ _ 3 3 3 _ _ _ _ _ 2 2 2 
16 17 6 
6 7 0 




// SJF có thể conflict tối đa 2 cái: cái xuất hiện mới (2), 1 cái đẩy từ I/O qua (1)
input:
3
2
0 3 2 3
5 3
output:
1 1 1 _ _ 2 2 2 1 1 1 
_ _ _ 1 1 
11 3 
3 0 





// SRTN như trên, có thể conflict tối đa 3 cái: cái xuất hiện mới (3), cái đẩy từ I/O qua (2), cái hiện tại bị interupt và đẩy vào ready queue (1)
input:
4
3
0 1 5 2
3 5
6 2
output:
1 _ _ 2 2 2 3 3 1 1 2 2 
_ 1 1 1 1 1 
10 9 2 
2 4 0 
